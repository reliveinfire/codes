#include <iostream>
#include <string>
#include <vector>
#include <limits.h>
#include <queue>
#include <stack>
#include <sstream>
#include <algorithm>
#include <unordered_set>
#include <unordered_map>
#include <set>
#include <map>

using namespace std;
struct TreeNode {
	int val;
	TreeNode *left;
	TreeNode *right;
	TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};
vector<int> preOrder = {100,50, 40, 80, 60, 200, 150, 180, 250};
TreeNode* genBST(vector<int>& pre)
{
        int idx = 0;
        TreeNode* node = new TreeNode(pre[idx++]);
        stack<TreeNode*> st;
        st.push(node);
        while(idx < pre.size()){
                if (pre[idx] < st.top()->val){
                        st.top()->left = new TreeNode(pre[idx++]);
                        st.push(st.top()->left);
                } else {
                        TreeNode* tmp;
                        while(!st.empty() && st.top()->val < pre[idx]){
                                tmp = st.top();
                                st.pop();
                        }
                        tmp->right = new TreeNode(pre[idx++]);
                        st.push(tmp->right);
                }
        }
        return node;
}


class Solution {
	public:
	int hIndex(vector<int>& citations){
		int target;
		if (citations.size() % 2 == 0){
			target = citations.size() / 2 + 1;
		} else
			target = citations.size() / 2;
		return quickSelect(citations, 0 , citations.size() - 1, target);
	}

	int quickSelect(vector<int>& cita, int lo, int hi, int target)
	{
		int pivot = cita[lo];
		int ll = lo + 1, rr = hi;
		while(true){
			while(cita[ll] < pivot && ll < hi)  ll++;
			while(cita[rr] > pivot && rr > lo)  rr--;
			if (ll >= rr)
				break;
			swap(cita[ll], cita[rr]);
			ll++;
			rr--;
		}
		swap(cita[lo], cita[rr]);
		if (rr == target)
			return rr;
		else if (rr > target)
			return quickSelect(cita, lo, rr-1, target);
		else
			return quickSelect(cita, rr+1, hi, target);
		
	}
};

#define genVector(data, array) vector<int> data(array, array+sizeof(array)/sizeof(array[0]));
int main()
{
	vector<int> A = {3,0,6,1,5};
	vector<int> B = {1,2,3};
	Solution sol;
	vector<int> ret_vec;
	int ret;
	ret = sol.
	cout << ret << "\n";

	for (int i = 0 ; i < ret_vec.size() ; i++)
		cout << ret_vec[i] << " ";
	cout <<endl;

	return 0;
}
